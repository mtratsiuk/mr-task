{"version":3,"file":"emails-input.umd.js","sources":["../src/styles.ts","../src/component.ts","../src/utils.ts","../src/email-label.ts","../src/email-editor.ts","../src/emails-input.ts","../src/emails-input-api.ts","../index.ts"],"sourcesContent":["let rules = \"\"\nlet isLoaded = false\n\nexport function css(value: string): void {\n    rules += value\n}\n\nexport function loadStyles(): void {\n    if (isLoaded) {\n        return\n    }\n\n    isLoaded = true\n\n    const head = document.head\n    const style = document.createElement(\"style\")\n\n    head.appendChild(style)\n\n    style.appendChild(document.createTextNode(rules))\n}\n","export type IComponent<T extends Element = Element> = {\n    ref: IRef<T>\n    render: (node: Element) => void\n    mount: () => void\n    unmount: () => void\n    remove: () => void\n}\n\nexport type IRef<T extends Element = Element> = {\n    create: () => string\n    mount: () => void\n    current: T | null\n}\n\nexport abstract class Component<T extends Element = Element> implements IComponent<T> {\n    abstract onMount(): void\n    abstract onUnmount(): void\n    abstract view(): string\n\n    ref: IRef<T> = new Ref()\n\n    /**\n     * Note: untrusted input is NOT automatically sanitized\n     */\n    render(node: Element, mode: InsertPosition = \"beforeend\"): void {\n        const markup = this.view()\n            .split(\"\\n\")\n            .map((x) => x.trim())\n            .filter(Boolean)\n            .join(\" \")\n\n        node.insertAdjacentHTML(mode, markup)\n\n        this.mount()\n    }\n\n    mount(): void {\n        this.ref.mount()\n        this.onMount()\n    }\n\n    unmount(): void {\n        this.onUnmount()\n    }\n\n    remove(): void {\n        this.unmount()\n        this.ref.current?.parentElement?.removeChild(this.ref.current)\n    }\n}\n\nconst REF_ID_ATTR = \"data-mr-ref\"\n\nexport class Ref<T extends Element> implements IRef<T> {\n    id: string | null\n    current: T | null\n\n    constructor() {\n        this.id = null\n        this.current = null\n    }\n\n    create(): string {\n        this.id = getNextRefId()\n\n        return `${REF_ID_ATTR}=\"${this.id}\"`\n    }\n\n    mount(): void {\n        if (!this.id) {\n            throw new Error(\"Cannot mount ref. Make sure to call `ref.create()` first\")\n        }\n\n        this.current = document.querySelector(`[${REF_ID_ATTR}=\"${this.id}\"]`)\n    }\n}\n\nlet refId = (Math.random() * 100) >>> 0\n\nfunction getNextRefId(): string {\n    refId += 1\n\n    return `${refId}.${(Math.random() * 1000) >>> 0}`\n}\n","const EMAIL_REGEXP = /^[^\\s]+@[^\\s]+$/\n\nexport function isValidEmail(value: string): boolean {\n    return EMAIL_REGEXP.test(value)\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport function noop(): void {}\n\nexport const keyCodes: Record<string, { key: string; code: number }> = {\n    Enter: { key: \"Enter\", code: 13 },\n}\n\nexport function isKeyPressed(event: KeyboardEvent, { key, code }: typeof keyCodes[\"key\"]): boolean {\n    return event.key === key || event.keyCode === code\n}\n\nexport function getPasteInput(event: ClipboardEvent): string | undefined {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (event.clipboardData || (window as any)?.clipboardData)?.getData(\"text\")\n}\n\nconst htmlEscapes: Record<string, string> = {\n    \"&\": \"&amp;\",\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    '\"': \"&quot;\",\n    \"'\": \"&#39;\",\n}\n\nconst htmlEscapesRegexp = /[&<>\"']/g\n\nexport function escape(value: string): string {\n    return value && value.replace(htmlEscapesRegexp, (char) => htmlEscapes[char])\n}\n","import { Component } from \"./component\"\nimport { css } from \"./styles\"\nimport { colors, icons } from \"./theme\"\nimport { isValidEmail, noop, escape } from \"./utils\"\n\nexport const selectors = {\n    root: \"mr-email-label\",\n    invalid: \"mr-email-label--invalid\",\n    remove: \"mr-email-label__remove\",\n}\n\nexport type EmailLabelProps = {\n    value: string\n    onRemove?: (label: EmailLabel) => void\n}\n\nexport class EmailLabel extends Component {\n    _value: EmailLabelProps[\"value\"]\n    _onRemove: NonNullable<EmailLabelProps[\"onRemove\"]>\n    _buttonRemove?: HTMLButtonElement | null\n\n    constructor({ value, onRemove = noop }: EmailLabelProps) {\n        super()\n        this._value = value\n        this._onRemove = onRemove\n    }\n\n    get value(): string {\n        return this._value\n    }\n\n    get isValid(): boolean {\n        return isValidEmail(this.value)\n    }\n\n    onMount(): void {\n        this._buttonRemove = this.ref.current?.querySelector(\"button\")\n        this._buttonRemove?.addEventListener(\"click\", this._handleRemove)\n    }\n\n    onUnmount(): void {\n        this._buttonRemove?.removeEventListener(\"click\", this._handleRemove)\n    }\n\n    _handleRemove = (): void => {\n        this._onRemove(this)\n    }\n\n    view(): string {\n        return `\n            <div\n                ${this.ref.create()}\n                class=\"${selectors.root} ${this.isValid ? \"\" : selectors.invalid}\"\n            >\n                <div>${escape(this.value)}</div>\n                <button\n                    class=\"${selectors.remove}\"\n                    aria-label=\"remove\"\n                >\n                  ${icons.remove}\n                </button>\n            </div>\n        `\n    }\n}\n\ncss(`\n    .${selectors.root} {\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        height: 25px;\n        padding: 5px 9px;\n\n        background-color: ${colors.highlight};\n        border-radius: 100px;\n    }\n\n    .${selectors.invalid} {\n        background-color: ${colors.background};\n        border-bottom: 1px dashed ${colors.error};\n        border-radius: 0px;\n        padding: 5px 0px;\n    }\n\n    .${selectors.remove} {\n        display: block;\n\n        padding: 3px 3px 3px 8px;\n\n        background: transparent;\n        border: none;\n        outline: none;\n        cursor: pointer;\n        transition: transform 0.2s;\n    }\n\n    .${selectors.remove}:focus {\n        transform: scale(1.3);\n    }\n`)\n","import { Component } from \"./component\"\nimport { css } from \"./styles\"\nimport { colors } from \"./theme\"\nimport { keyCodes, isKeyPressed, getPasteInput, noop } from \"./utils\"\n\nexport const PLACEHOLDER_TEXT = \"add more peopleâ€¦\"\nexport const SUBMIT_ON_KEYS = [keyCodes.Enter]\nexport const SUBMIT_ON_CHARS = [\",\"]\nexport const SPLIT_CHARS_REGEXP = new RegExp(`[${SUBMIT_ON_CHARS.join(\"\")}]`)\n\nexport const selectors = {\n    root: \"mr-email-editor\",\n}\n\nexport type EmailEditorProps = {\n    onSubmit?: (value: string) => void\n}\n\nexport class EmailEditor extends Component<HTMLInputElement> {\n    _onSubmit: (value: string) => void\n\n    constructor({ onSubmit = noop }: EmailEditorProps) {\n        super()\n        this._onSubmit = onSubmit\n    }\n\n    get value(): string | undefined {\n        return this.ref.current?.value\n    }\n\n    onMount(): void {\n        this.ref.current?.addEventListener(\"paste\", this._handlePaste)\n        this.ref.current?.addEventListener(\"input\", this._handleInput)\n        this.ref.current?.addEventListener(\"blur\", this._handleBlur)\n        this.ref.current?.addEventListener(\"keydown\", this._handleKeydown)\n    }\n\n    onUnmount(): void {\n        this.ref.current?.removeEventListener(\"paste\", this._handlePaste)\n        this.ref.current?.removeEventListener(\"input\", this._handleInput)\n        this.ref.current?.removeEventListener(\"blur\", this._handleBlur)\n        this.ref.current?.removeEventListener(\"keydown\", this._handleKeydown)\n    }\n\n    _handlePaste = (event: ClipboardEvent): void => {\n        event.preventDefault()\n\n        const input = getPasteInput(event)\n\n        if (!input) {\n            return\n        }\n\n        this._submit(input.split(SPLIT_CHARS_REGEXP))\n    }\n\n    _handleInput = (): void => {\n        const value = this.value\n\n        if (!value) {\n            return\n        }\n\n        const inputChar = value[value.length - 1]\n\n        if (SUBMIT_ON_CHARS.some((char) => inputChar === char)) {\n            this._submit(value.slice(0, value.length - 1))\n        }\n    }\n\n    _handleBlur = (): void => {\n        this._submit(this.value)\n    }\n\n    _handleKeydown = (event: KeyboardEvent): void => {\n        if (SUBMIT_ON_KEYS.some((key) => isKeyPressed(event, key))) {\n            this._submit(this.value)\n        }\n    }\n\n    _submit(email: string | string[] | undefined): void {\n        if (this.ref.current) {\n            this.ref.current.value = \"\"\n        }\n\n        if (!email) {\n            return\n        }\n\n        const emails = (Array.isArray(email) ? email : [email]).map((value) => value.trim()).filter(Boolean)\n\n        for (const value of emails) {\n            this._onSubmit(value)\n        }\n    }\n\n    view(): string {\n        return `\n            <input\n              ${this.ref.create()}\n              type=\"text\"\n              placeholder=\"${PLACEHOLDER_TEXT}\"\n              class=\"${selectors.root}\"\n            />\n        `\n    }\n}\n\ncss(`\n    .${selectors.root} {\n        display: block;\n        height: 25px;\n        min-width: 220px;\n        padding: 5px 9px;\n\n        background-color: ${colors.background};\n        border: none;\n        outline: none;\n    }\n\n    .${selectors.root}::placeholder {\n        color: ${colors.textSecondary}\n    }\n`)\n","import { Component } from \"./component\"\nimport { css } from \"./styles\"\nimport { colors } from \"./theme\"\n\nimport { EmailLabel } from \"./email-label\"\nimport { EmailEditor } from \"./email-editor\"\n\nexport const selectors = {\n    root: \"mr-emails-input\",\n}\n\nexport class EmailsInput extends Component<HTMLDivElement> {\n    _handleEmailSubmit = (value: string): void => {\n        this.addEmail(value)\n    }\n\n    _handleEmailRemove = (value: EmailLabel): void => {\n        this._removeLabel(value)\n    }\n\n    _editor = new EmailEditor({ onSubmit: this._handleEmailSubmit })\n    _labels: EmailLabel[] = []\n\n    get value(): string[] {\n        return this._labels.map(({ value }) => value)\n    }\n\n    get state(): { value: string; isValid: boolean }[] {\n        return this._labels.map(({ value, isValid }) => ({ value, isValid }))\n    }\n\n    addEmail(email: string): void {\n        const renderTarget = this._editor.ref.current\n\n        if (!renderTarget) {\n            throw new Error(\"Cannot render `EmailLabel:` `EmailEditor` is not found\")\n        }\n\n        const label = new EmailLabel({\n            value: email,\n            onRemove: this._handleEmailRemove,\n        })\n\n        label.render(renderTarget, \"beforebegin\")\n\n        this._labels.push(label)\n    }\n\n    removeEmail(email: string): void {\n        for (const label of this._labels) {\n            if (label.value === email) {\n                this._removeLabel(label)\n            }\n        }\n    }\n\n    onMount(): void {\n        this._editor.mount()\n    }\n\n    onUnmount(): void {\n        this._editor.unmount()\n\n        for (const label of this._labels) {\n            label.unmount()\n        }\n    }\n\n    _removeLabel(labelToRemove: EmailLabel): void {\n        this._labels = this._labels.filter((label) => label !== labelToRemove)\n\n        labelToRemove.remove()\n    }\n\n    view(): string {\n        return `\n            <div\n                ${this.ref.create()}\n                class=\"${selectors.root}\"\n            >\n                ${this._editor.view()}\n            </div>\n        `\n    }\n}\n\ncss(`\n    .${selectors.root} {\n        display: flex;\n        flex-wrap: wrap;\n        justify-content: flex-start;\n        align-content: flex-start;\n\n        width: 100%;\n        height: 100%;\n        padding: 8px;\n\n        overflow-y: auto;\n\n        background: ${colors.background};\n        border: 1px solid ${colors.textSecondary};\n        box-sizing: border-box;\n        border-radius: 4px;\n\n        font-size: 14px;\n    }\n\n    .${selectors.root} *,\n    .${selectors.root} *::before,\n    .${selectors.root} *::after, {\n        box-sizing: inherit;\n    }\n\n    .${selectors.root} > * {\n        margin-bottom: 4px;\n    }\n\n    .${selectors.root} > :not(:last-child) {\n        margin-right: 8px;\n\n        flex: 0 0 auto;\n    }\n\n    .${selectors.root} > :last-child {\n        flex: 1 0 auto;\n    }\n`)\n","import { loadStyles } from \"./styles\"\nimport { EmailsInput } from \"./emails-input\"\n\n/**\n * Provides API to initialize emails-input component\n * and access & update its state.\n *\n * ```js\n * const app = document.getElementById(\"root\")\n * const emailsInput = window.mrEmailsInput.render(app)\n *\n * emailsInput.getAll() // [\"user@some.mail\", \"invalid@\"]\n * emailsInput.getValid() // [\"user@some.mail\"]\n *\n * emailsInput.add(\"new@some.mail\")\n * emailsInput.remove(\"invalid@\")\n *\n * emailsInput.destroy()\n * ```\n */\nexport class EmailsInputApi {\n    private _input: EmailsInput\n\n    /**\n     * Renders component into provided node\n     *\n     * @param node - target element\n     */\n    constructor(node: Element) {\n        loadStyles()\n\n        this._input = new EmailsInput()\n\n        this._input.render(node)\n    }\n\n    /**\n     * Returns the list of all typed emails\n     *\n     * @alias EmailsInputApi.getAll\n     */\n    get value(): string[] {\n        return this.getAll()\n    }\n\n    /**\n     * Returns the list of all typed emails\n     *\n     * @alias EmailsInputApi.value\n     */\n    getAll(): string[] {\n        return this._input.value\n    }\n\n    /**\n     * Returns the list of all typed emails that are _valid_\n     *\n     * NOTE: Only simple email validation is performed\n     */\n    getValid(): string[] {\n        return this._input.state.filter(({ isValid }) => isValid).map(({ value }) => value)\n    }\n\n    /**\n     * Adds provided email to the input\n     *\n     * @param email - email to add\n     */\n    add(email: string): void {\n        this._input.addEmail(email)\n    }\n\n    /**\n     * Removes provided email from the input\n     *\n     * @param email - email to remove\n     */\n    remove(email: string): void {\n        this._input.removeEmail(email)\n    }\n\n    /**\n     * Destroys component and removes it from the DOM\n     */\n    destroy(): void {\n        this._input.remove()\n    }\n}\n","import { EmailsInputApi } from \"./src/emails-input-api\"\n\nexport function render(node: HTMLElement): EmailsInputApi {\n    return new EmailsInputApi(node)\n}\n"],"names":["rules","isLoaded","css","value","Component","ref","Ref","render","node","mode","markup","this","view","split","map","x","trim","filter","Boolean","join","insertAdjacentHTML","mount","onMount","unmount","onUnmount","remove","current","parentElement","removeChild","id","create","refId","Math","random","REF_ID_ATTR","Error","document","querySelector","EMAIL_REGEXP","noop","htmlEscapes","&","<",">","\"","'","htmlEscapesRegexp","selectors","EmailLabel","onRemove","_this","_value","_onRemove","_buttonRemove","_handleRemove","_this$ref$current","addEventListener","removeEventListener","isValid","replace","char","test","SUBMIT_ON_KEYS","key","code","SUBMIT_ON_CHARS","SPLIT_CHARS_REGEXP","RegExp","EmailEditor","onSubmit","_onSubmit","_handlePaste","event","preventDefault","input","clipboardData","window","_window","_ref2","getData","getPasteInput","_submit","_handleInput","inputChar","length","some","slice","_handleBlur","_handleKeydown","keyCode","isKeyPressed","email","Array","isArray","_this$ref$current9","EmailsInput","_handleEmailSubmit","addEmail","_handleEmailRemove","_removeLabel","_editor","_labels","renderTarget","label","push","removeEmail","labelToRemove","EmailsInputApi","_input","head","style","createElement","appendChild","createTextNode","loadStyles","getAll","getValid","state","add","destroy"],"mappings":"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"}